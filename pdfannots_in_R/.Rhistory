highlights = [a for a in annots if a.tagname == 'Highlight' and a.contents is None]
comments = [a for a in annots if a.tagname not in ANNOT_NITS and a.contents]
nits = [a for a in annots if a.tagname in ANNOT_NITS]
for secname in sections:
if highlights and secname == 'highlights':
printheader("Highlights")
for a in highlights:
print(self.format_annot(a), file=outfile)
if comments and secname == 'comments':
printheader("Detailed comments")
for a in comments:
print(self.format_annot(a), file=outfile)
if nits and secname == 'nits':
printheader("Nits")
for a in nits:
if a.tagname == 'StrikeOut':
extra = "delete"
else:
extra = None
print(self.format_annot(a, extra), file=outfile)
def resolve_dest(doc, dest):
if isinstance(dest, bytes):
dest = pdftypes.resolve1(doc.get_dest(dest))
elif isinstance(dest, PSLiteral):
dest = pdftypes.resolve1(doc.get_dest(dest.name))
if isinstance(dest, dict):
dest = dest['D']
return dest
class Outline:
def __init__(self, title, dest, pos):
self.title = title
self.dest = dest
self.pos = pos
def get_outlines(doc, pageslist, pagesdict):
result = []
for (_, title, destname, actionref, _) in doc.get_outlines():
if destname is None and actionref:
action = pdftypes.resolve1(actionref)
if isinstance(action, dict):
subtype = action.get('S')
if subtype is PSLiteralTable.intern('GoTo'):
destname = action.get('D')
if destname is None:
continue
dest = resolve_dest(doc, destname)
# consider targets of the form [page /XYZ left top zoom]
if dest[1] is PSLiteralTable.intern('XYZ'):
(pageref, _, targetx, targety) = dest[:4]
if type(pageref) is int:
page = pageslist[pageref]
elif isinstance(pageref, pdftypes.PDFObjRef):
page = pagesdict[pageref.objid]
else:
sys.stderr.write('Warning: unsupported pageref in outline: %s\n' % pageref)
page = None
if page:
pos = Pos(page, targetx, targety)
result.append(Outline(title, destname, pos))
return result
def process_file(fh, emit_progress):
rsrcmgr = PDFResourceManager()
laparams = LAParams()
device = RectExtractor(rsrcmgr, laparams=laparams)
interpreter = PDFPageInterpreter(rsrcmgr, device)
parser = PDFParser(fh)
doc = PDFDocument(parser)
pageslist = [] # pages in page order
pagesdict = {} # map from PDF page object ID to Page object
allannots = []
for (pageno, pdfpage) in enumerate(PDFPage.create_pages(doc)):
page = Page(pageno, pdfpage.mediabox)
pageslist.append(page)
pagesdict[pdfpage.pageid] = page
if pdfpage.annots:
# emit progress indicator
if emit_progress:
sys.stderr.write((" " if pageno > 0 else "") + "%d" % (pageno + 1))
sys.stderr.flush()
pdfannots = []
for a in pdftypes.resolve1(pdfpage.annots):
if isinstance(a, pdftypes.PDFObjRef):
pdfannots.append(a.resolve())
else:
sys.stderr.write('Warning: unknown annotation: %s\n' % a)
page.annots = getannots(pdfannots, page)
page.annots.sort()
device.setannots(page.annots)
interpreter.process_page(pdfpage)
allannots.extend(page.annots)
if emit_progress:
sys.stderr.write("\n")
outlines = []
try:
outlines = get_outlines(doc, pageslist, pagesdict)
except PDFNoOutlines:
if emit_progress:
sys.stderr.write("Document doesn't include outlines (\"bookmarks\")\n")
except Exception as ex:
sys.stderr.write("Warning: failed to retrieve outlines: %s\n" % ex)
device.close()
return (allannots, outlines)
def parse_args():
p = argparse.ArgumentParser(description=__doc__)
p.add_argument("input", metavar="INFILE", type=argparse.FileType("rb"),
help="PDF file to process")
g = p.add_argument_group('Basic options')
g.add_argument("-p", "--progress", default=False, action="store_true",
help="emit progress information")
g.add_argument("-o", metavar="OUTFILE", type=argparse.FileType("w"), dest="output",
default=sys.stdout, help="output file (default is stdout)")
g.add_argument("-n", "--cols", default=2, type=int, metavar="COLS", dest="cols",
help="number of columns per page in the document (default: 2)")
g = p.add_argument_group('Options controlling output format')
allsects = ["highlights", "comments", "nits"]
g.add_argument("-s", "--sections", metavar="SEC", nargs="*",
choices=allsects, default=allsects,
help=("sections to emit (default: %s)" % ', '.join(allsects)))
g.add_argument("--no-group", dest="group", default=True, action="store_false",
help="emit annotations in order, don't group into sections")
g.add_argument("--print-filename", dest="printfilename", default=False, action="store_true",
help="print the filename when it has annotations")
g.add_argument("-w", "--wrap", metavar="COLS", type=int,
help="wrap text at this many output columns")
return p.parse_args()
def main():
args = parse_args()
global COLUMNS_PER_PAGE
COLUMNS_PER_PAGE = args.cols
(annots, outlines) = process_file(args.input, args.progress)
pp = PrettyPrinter(outlines, args.wrap)
if args.printfilename and annots:
print("# File: '%s'\n" % args.input.name)
if args.group:
pp.printall_grouped(args.sections, annots, args.output)
else:
pp.printall(annots, args.output)
return 0
if __name__ == "__main__":
sys.exit(main())
python pdfannots.py input/2A_History_of_Medieval_Heresy_and_Inquisition_Introduction.pdf
exit
repl_python()
python pdfannots.py test.pdf
pdfannots.py
python
python pdfannots.py
python C:\Users\vhole\Anaconda3\Scripts\pdfannots
pdfannots.py
pwd \pdfannots
getcwd()
python
exit
use_python("C:/Users/vhole/Anaconda3/python.exe")
Sys.which("python")
repl_python()
py_config()
exit
py_config()
# Evaluate the chosen script
source_python("test_func.py")
# Create parameter to pass to Python function
x = 10
# Call my_function()
y = my_function(x)
print(y)
# Evaluate the chosen script
source_python("test_func.py")
# Create parameter to pass to Python function
x = 10
# Call my_function()
y = my_function(x)
print(y)
# Evaluate the chosen script
source_python("test_func.py")
# Create parameter to pass to Python function
x = 10
# Call my_function()
y = my_function(x)
library("reticulate")
# Evaluate the chosen script
source_python("test_func.py")
# Create parameter to pass to Python function
x = 10
# Call my_function()
y = my_function(x)
# Call my_function()
y = test_func(x)
getwd()
def my_function(x):
return x + 5
library("reticulate")
def my_function(x):
return x + 5
# Evaluate the chosen script
source_python("test_func.py")
# Create parameter to pass to Python function
x = 10
y = test_func(x)
print(y)my_functio
# Call my_function()
y = test_func(x)
# Call my_function()
y = my_function(x)
print(y)my_function
print(y)
import("pandas")
py_run_file("test_func.py")
print(py$my_var)
py_run_file("pdfannots.py")
py_run_file("pdfannots.py" "input/test.pdf")
py_run_file("pdfannots.py")
py_run_file("pdfannots.py") "input/test.pdf"
py_run_file("pdfannots.py")
py_run_string("pdfannots.py" "input/test.pdf")
py_run_string("pdfannots.py", "input/test.pdf")
py_run_file("pdfannots.py", "input/test.pdf")
source_python("pdfannots")
source_python("pdfannots.py")
source_python("pdfannots.py","input/test.pdf")
source_python("pdfannots.py")
source_python("pdfannots.py")
INFILE = "input/test.pdf"
INFILE = "input/test.pdf"
source_python("pdfannots.py")
INFILE = ("input/test.pdf")
source_python("pdfannots.py")
library("reticulate")
py_run_file("pdfannots.py")
py_run_file("pdfannots.py input/test.pdf")
py_run_file("pdfannots.py), (input/test.pdf")
py_run_file("pdfannots.py"), ("input/test.pdf")
py_run_file("pdfannots.py"),("input/test.pdf")
py_run_file("pdfannots.py")
repl_python() #Åbner python i R
python pdfannots.py C:\Users\vhole\Documents\Professional\R\Python_in_R\input\test.pdf
quit
system("python pdfannots.py test.pdf")
system("python pdfannots.py input/test.pdf")
test <- system("python pdfannots.py input/test.pdf") #Det her virker!!!
# Playing around with regular expressions
grep(" +",test)
# Playing around with regular expressions
grep(" +",test, value = FALSE)
# Playing around with regular expressions
grep("\s+",test, value = FALSE)
# Playing around with regular expressions
grep("/s+",test, value = FALSE)
# Playing around with regular expressions
gsub(" +"," ",test)
print(gsub(" +"," ",test))
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/test.pdf") #Det her virker!!!
write(system("python pdfannots.py input/test.pdf"))
write(system("python pdfannots.py input/test.pdf"))
write.txt(system("python pdfannots.py input/test.pdf"))
write.csv(system("python pdfannots.py input/test.pdf"))
capture.output(system("python pdfannots.py input/test.pdf"), file = test1)
capture.output(system("python pdfannots.py input/test.pdf"))
cat(test)
out <- capture.output(system("python pdfannots.py input/test.pdf"))
print(out)
(system("python pdfannots.py input/test.pdf"))
system("python pdfannots.py input/test.pdf")
repl_python()
quit
devtools::install_github("rstudio/reticulate")
install.packages("reticulate")
install.packages("rtools")
install.packages("Rtools")
repl_python() #Åbner python i R
library("reticulate")
repl_python() #Åbner python i R
repl_python() #Åbner python i R
repl_python() #Åbner python i R
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/test.pdf") #Det her virker!!!'
quit
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/test.pdf") #Det her virker!!!'
repl_python() #Opens python in R
quit
repl_python()
quit
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/test.pdf") #Det her virker!!!
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/test.pdf") #Det her virker!!!
getcwd
getwd
library("reticulate") #Loads reticulate package - now the exotic animal (python) can live in your home (Rstudio)
# DENNE COMMAND GØR AT MAN KAN KØRE SCRIPTET MED EN INFILE
system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf") #Det her virker!!!
system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
install.packages("reticulate")
system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
install.packages("reticulate")
library(tidyverse)
a <- system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
a
a <- paste(system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf"))
a <- system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf > dirtyoutput.txt")
repl_python()
library("reticulate") #Loads reticulate package - now the exotic animal (python) can live in your home (Rstudio)
repl_python() #Opens python in R
quit
py_capture_output("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
output <- reticulate::py_capture_output("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
a <- system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf > dirtyoutput.txt")
a <- system("python pdfannots.py input/a_history_of_medieval_heresy_and_inquisition.pdf")
output <- reticulate::py_capture_output("a")
system("python pdfannots.py -p -o testoutput3.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
system("python pdfannots.py -p -o testoutput3.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
docs <- "testoutput.txt"
# Test it all out
library(tm)
# Test it all out
library(tidyverse)
library(tm)
library(reticulate)
stripWhitespace(docs)
system("python pdfannots.py -p -o testoutput2.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
## Get your data
cname <- file.path("testoutput.txt")
cname
dir(cname)
## Get R packages for text mining
library(tm)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
####### https://rpubs.com/pjmurphy/265713
dir.create("test")
## Get your data
cname <- file.path("test/testoutput.txt")
cname
dir(cname)
## Get R packages for text mining
library(tm)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
for (j in seq(docs)) {
docs[[j]] <- gsub( " \t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
docs[[j]] <- gsub( " \t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
## Get your data
cname <- file.path("./test/", "texts")
cname
dir(cname)
dir(cname)
## Get R packages for text mining
library(tm)
## Get your data
cname <- file.path("./test/", "texts")
cname
dir(cname)
## Get your data
cname <- file.path("./test/", "texts")
cname
dir(cname)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
getwd()
## Get your data
cname <- file.path("./test/", "output")
cname
dir(cname)
## Get your data
cname <- file.path("./test/")
cname
dir(cname)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
docs <- tm_map(docs,removePunctuation)
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( " \t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
for (1 in seq(docs)) {
docs[[1]] <- gsub( " \t"," ", docs[[j]])
docs[[1]] <- gsub( " +"," ", docs[[j]])
}
for (a in seq(docs)) {
docs[[a]] <- gsub( " \t"," ", docs[[j]])
docs[[a]] <- gsub( " +"," ", docs[[j]])
}
stripWhitespace(docs)
stripWhitespace("./test/testoutput.txt")
## Get your data
cname <- file.path("./test/")
cname
dir(cname)
## Get R packages for text mining
library(tm)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
docs <- tm_map(docs,removePunctuation)
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( " +"," ", docs[[j]])
stripWhitespace(docs)
for (j in seq(docs)) {
docs[[j]] <- gsub( "\t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
writeLines(as.character(docs[1]))
docs <- tm_map(docs,removePunctuation)
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( "\t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
writeLines(as.character(docs[1]))
docs <- tm_map(docs, PlainTextDocument
docs <- tm_map(docs, PlainTextDocument)
system("python pdfannots.py -p -o testoutput1.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
## Get your data
cname <- file.path("./test/")
cname
dir(cname)
## Get R packages for text mining
library(tm)
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
docs <- tm_map(docs,removePunctuation)
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( " \t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( "\t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
writeLines(as.character(docs[1])) # Check to see if it worked.
docs <- tm_map(docs, PlainTextDocument)
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
for (j in seq(docs)) {
docs[[j]] <- gsub( "\t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
writeLines(as.character(docs[1])) # Check to see if it worked.
system("python pdfannots.py --help")
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
## Lets load texts to R
docs <- VCorpus(DirSource(cname))
summary(docs)
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
# To write out the full text, use writeLines()
class(docs[1])
writeLines(as.character(docs[1]))
stripWhitespace("/test/testoutput.txt")
## For details about documents in the corpus, use the inspect(docs) command.
inspect(docs[1])
writeLines(as.character(docs[1])) # Check to see if it worked.
for (j in seq(docs)) {
docs[[j]] <- gsub( "\t"," ", docs[[j]])
docs[[j]] <- gsub( " +"," ", docs[[j]])
}
writeLines(as.character(docs[1])) # Check to see if it worked.
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
library(reticulate)
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
system("python pdfannots.py --help") #Brings up the help menu
library(reticulate)
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
system("python pdfannots.py -p -o testoutput.txt input/a_history_of_medieval_heresy_and_inquisition.pdf")
